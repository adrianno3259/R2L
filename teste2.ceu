#include "sdl/sdl.ceu"
#include "c.ceu"

#define CEU_SDL_MODE_FRAME (1000/60)

#define SCREEN_WIDTH 800
#define SCREEN_HEIGHT 600

#define LEVEL_WIDTH 800
#define LEVEL_HEIGHT 600


native/pre do
	##include<math.h>
end

native _acos, _atan2;
native/nohold 
    _SDL_RenderCopyEx,
	_SDL_ShowCursor;
	
native/const 
    _SDL_FLIP_NONE, 
    _SDL_FLIP_VERTICAL,
	_SDL_DISABLE;


var&? SDL_Init sdl = spawn SDL_Init("Right 2 Live", 800,600, SDL_Color(0xFF,0xFF,0x00,0xFF));
_SDL_ShowCursor(_SDL_DISABLE);


native/pre do
    typedef struct {float x, y; } vec2;              // definition for "t" is placed before CÃ©u declarations
end

#include "vecmath.ceu"


watching sdl do

	
	
	#include "shot.ceu"
	
	var& SDL_Open_Image tx_crosshair = spawn SDL_Open_Image( &sdl!.ren, "res/crosshair_lowres.png");

	code/await Crosshair(void) -> void do
		
		var SDL_Rect ch = val SDL_Rect(0, 0, outer.tx_crosshair.tex.width, outer.tx_crosshair.tex.height);
		par do
			var _SDL_MouseMotionEvent&& mse;
			every mse in SDL_MOUSEMOTION do
				ch.x = mse:x - ch.w/2;
				ch.y = mse:y - ch.h/2;
			end 
		with
			every SDL_REDRAW do
				_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.tx_crosshair.tex.tex, null, &&ch as _SDL_Rect&&);
			end 
		end
	end
	
	var SDL_Rect camera = val SDL_Rect( 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT );
	
	#include "map.ceu"
	pool[] Block blocks;
	
	spawn Block(200, 200) in blocks;
	
	
	#include "player.ceu"
	//var& SDL_Open_Image img = spawn SDL_Open_Image(&sdl!.ren, "res/crosshair_lowres.png");
    //var SDL_Rect rect = val SDL_Rect(10,10 , img.tex.width,img.tex.height);
	var& Player p = spawn Player(100.0, 100.0);
	spawn Crosshair();
	
	
	every SDL_REDRAW do
        //_SDL_RenderCopy(&&sdl!.ren, &&img.tex.tex, null, &&rect as _SDL_Rect&&);
		
		_printf(" player %d, %d\n", p.playerOrigin_x as int, p.playerOrigin_y as int);
		// Mover a camera
		camera.x = (p.playerOrigin_x as int);// - SCREEN_WIDTH/2) as int;
		camera.y = (p.playerOrigin_y as int);// - SCREEN_HEIGHT/2) as int;
		
		
		if (camera.x < 0) then
			camera.x = 0;
		end
		if (camera.y < 0) then
			camera.y = 0;
		end
		if( camera.x > LEVEL_WIDTH - camera.w ) then
			camera.x = LEVEL_WIDTH - camera.w;
		end
		if( camera.y > LEVEL_HEIGHT - camera.h ) then
			camera.y = LEVEL_HEIGHT - camera.h;
		end
		
		
		//_SDL_SetRenderDrawColor (sdl!.ren, 0xFF, 0xFF, 0xFF, 0xFF );
		//_SDL_RenderClear(sdl!.ren);
		
		
	
	end
	
	//await SDL_QUIT;
	
end

escape 0;

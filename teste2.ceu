#include "sdl/sdl.ceu"
#include "c.ceu"

#define CEU_SDL_MODE_FRAME (1000/60)

native/pre do
	##include<math.h>
end

native _acos, _atan2;
native/nohold 
    _SDL_RenderCopyEx;
	
native/const 
    _SDL_FLIP_NONE, 
    _SDL_FLIP_VERTICAL;


var&? SDL_Init sdl = spawn SDL_Init("Right 2 Live", 800,600, SDL_Color(0xFF,0xFF,0x00,0xFF));


native/pre do
    typedef struct {float x, y; } vec2;              // definition for "t" is placed before CÃ©u declarations
end

#include "vecmath.ceu"


watching sdl do

	#include "shot.ceu"


	var& SDL_Open_Image tx_crosshair = spawn SDL_Open_Image( &sdl!.ren, "res/crosshair_lowres.png");

	code/await Crosshair(void) -> void do
		
		var SDL_Rect ch = val SDL_Rect(0, 0, outer.tx_crosshair.tex.width, outer.tx_crosshair.tex.height);
		par do
			var _SDL_MouseMotionEvent&& mse;
			every mse in SDL_MOUSEMOTION do
				ch.x = mse:x - ch.w/2;
				ch.y = mse:y - ch.h/2;
			end 
		with
			every SDL_REDRAW do
				_SDL_RenderCopy(&&outer.sdl!.ren, &&outer.tx_crosshair.tex.tex, null, &&ch as _SDL_Rect&&);
			end 
		end
	end
	
	#include "player.ceu"
	
	//var& SDL_Open_Image img = spawn SDL_Open_Image(&sdl!.ren, "res/crosshair_lowres.png");
    //var SDL_Rect rect = val SDL_Rect(10,10 , img.tex.width,img.tex.height);
	spawn Player(100.0, 100.0);
	spawn Crosshair();
    
	
	every SDL_REDRAW do
        //_SDL_RenderCopy(&&sdl!.ren, &&img.tex.tex, null, &&rect as _SDL_Rect&&);
    end
	
	//await SDL_QUIT;
	
end

escape 0;
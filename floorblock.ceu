#define GRID_SIZE_X 8
#define GRID_SIZE_Y 6

#define BLOCK_SIZE 100


#define BL_EDGE_UP 0
#define BL_EDGE_RIGHT 90
#define BL_EDGE_DOWN 180
#define BL_EDGE_LEFT 270

#define BL_CORNER_DOWN_RIGHT 0
#define BL_CORNER_DOWN_LEFT 90
#define BL_CORNER_UP_LEFT 180
#define BL_CORNER_UP_RIGHT 270

//pool[] SDL_Open_Image tx_all;
//spawn SDL_Open_Image( &sdl!.ren, "res/blocks/cobblestone.tif") in tx_all;

var& SDL_Open_Image tx_COBBLE 			= spawn SDL_Open_Image( &sdl!.ren, "res/blocks/cobblestone.tif");
var& SDL_Open_Image tx_ROOF_EDGE 		= spawn SDL_Open_Image( &sdl!.ren, "res/blocks/rooftop_edge.png");
var& SDL_Open_Image tx_ROOF_CORNER 		= spawn SDL_Open_Image( &sdl!.ren, "res/blocks/rooftop_corner.png");
var& SDL_Open_Image tx_SIDEWALK_CORNER 	= spawn SDL_Open_Image( &sdl!.ren, "res/blocks/sidewalk_corner.png");
var& SDL_Open_Image tx_SIDEWALK_EDGE 	= spawn SDL_Open_Image( &sdl!.ren, "res/blocks/sidewalk_edge.png");
var& SDL_Open_Image tx_CRATES 			= spawn SDL_Open_Image( &sdl!.ren, "res/blocks/crates.png");

code/await FloorBlock(var int idx_x, var int idx_y, var&? SDL_Open_Image img, var int angle) -> void do
	
	code/tight X_pixel( var int idx_x ) -> int do
		escape ((idx_x * BLOCK_SIZE) as int);
	end	
	
	code/tight Y_pixel( var int idx_y ) -> int do		
		escape ((idx_y * BLOCK_SIZE) as int);
	end

	var int px = call X_pixel(idx_x);
	var int py = call Y_pixel(idx_y);
	
	var SDL_Rect surface=val SDL_Rect(px,py,BLOCK_SIZE,BLOCK_SIZE);
	
	every SDL_REDRAW do
		//var& SDL_
		_SDL_RenderCopyEx(  &&outer.sdl!.ren, 
							&&img!.tex.tex, 
							null,
							&&surface as _SDL_Rect&&, 
							angle, null, _SDL_FLIP_NONE);
	end;
end


code/await ObstacleBlock( var int idx_x, var int idx_y, var&? SDL_Open_Image img, var int angle) -> 
		(var SDL_Rect surface) -> FOREVER do
	
	code/tight X_pixel( var int idx_x ) -> int do
		escape ((idx_x * BLOCK_SIZE) as int);
	end	
	
	code/tight Y_pixel( var int idx_y ) -> int do		
		escape ((idx_y * BLOCK_SIZE) as int);
	end

	var int px = call X_pixel(idx_x);
	var int py = call Y_pixel(idx_y);
	
	surface=val SDL_Rect(px,py,BLOCK_SIZE,BLOCK_SIZE);
	
	every SDL_REDRAW do
		_SDL_RenderCopyEx(  &&outer.sdl!.ren, 
							&&img!.tex.tex, 
							null, &&surface as _SDL_Rect&&, 
							angle, null, _SDL_FLIP_NONE);
	end;
end

